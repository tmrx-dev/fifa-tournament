name: Deploy FIFA Tournament to Azure

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: fifa-prod-api
  AZURE_WEBAPP_PACKAGE_PATH: ./backend/FifaTournament.Api
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint
        
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test
        
    - name: Restore .NET dependencies
      run: |
        cd backend/FifaTournament.Api
        dotnet restore
        
    - name: Build .NET project
      run: |
        cd backend/FifaTournament.Api
        dotnet build --no-restore --configuration Release
        
    - name: Run .NET tests
      run: |
        cd backend
        dotnet test --no-build --configuration Release --verbosity normal

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: test
    outputs:
      webapp-name: ${{ steps.deploy.outputs.appServiceName }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Deploy Bicep template
      id: deploy
      uses: azure/arm-deploy@v2
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ secrets.AZURE_RESOURCE_GROUP }}
        template: infrastructure/main.bicep
        parameters: infrastructure/parameters/prod.parameters.json sqlAdminPassword=${{ secrets.SQL_ADMIN_PASSWORD }}
        failOnStdErr: false

  build-and-deploy-backend:
    name: Build and Deploy Backend API
    runs-on: ubuntu-latest
    needs: [test, deploy-infrastructure]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: |
        cd backend/FifaTournament.Api
        dotnet restore
        
    - name: Build application
      run: |
        cd backend/FifaTournament.Api
        dotnet build --no-restore --configuration Release
        
    - name: Publish application
      run: |
        cd backend/FifaTournament.Api
        dotnet publish --no-build --configuration Release --output ./publish
        
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/publish

  build-and-deploy-frontend:
    name: Build and Deploy Frontend App
    runs-on: ubuntu-latest
    needs: [test, deploy-infrastructure]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build application
      run: |
        cd frontend
        npm run build
        
    - name: Deploy to Static Web App
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "frontend"
        output_location: "dist"
