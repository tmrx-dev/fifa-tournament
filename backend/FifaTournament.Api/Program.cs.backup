using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Authentication.Google;
using Microsoft.AspNetCore.Authentication.MicrosoftAccount;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using FluentValidation;
using FifaTournament.Api.Data;
using FifaTournament.Api.Services;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

// Configure Entity Framework
builder.Services.AddDbContext<FifaTournamentContext>(options =>
{
    var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
    if (string.IsNullOrEmpty(connectionString))
    {
        // For development, use in-memory database
        options.UseInMemoryDatabase("FifaTournamentDb");
    }
    else
    {
        options.UseSqlServer(connectionString);
    }
});

// Configure AutoMapper
builder.Services.AddAutoMapper(typeof(MappingProfile));

// Configure FluentValidation
builder.Services.AddValidatorsFromAssemblyContaining<Program>();

// Add Data Protection services for state management with application name
var dataProtectionBuilder = builder.Services.AddDataProtection()
    .SetApplicationName("FifaTournamentApp");

// In Azure App Service, persist keys to a directory that survives restarts
if (!builder.Environment.IsDevelopment())
{
    var keyPath = Path.Combine(Environment.GetEnvironmentVariable("HOME") ?? "/tmp", "DataProtection-Keys");
    Directory.CreateDirectory(keyPath);
    dataProtectionBuilder.PersistKeysToFileSystem(new DirectoryInfo(keyPath));
}

// Add distributed cache for session support
builder.Services.AddDistributedMemoryCache();

// Add session support for OAuth state
builder.Services.AddSession(options =>
{
    options.IdleTimeout = TimeSpan.FromMinutes(30);
    options.Cookie.HttpOnly = true;
    options.Cookie.IsEssential = true;
    options.Cookie.SameSite = SameSiteMode.Lax;
    
    // Configure cookie security based on environment
    if (builder.Environment.IsDevelopment())
    {
        options.Cookie.SecurePolicy = CookieSecurePolicy.SameAsRequest;
    }
    else
    {
        options.Cookie.SecurePolicy = CookieSecurePolicy.Always; // Require HTTPS in production
    }
});

// Register services
builder.Services.AddScoped<IUserService, UserService>();
builder.Services.AddScoped<ITeamService, TeamService>();
builder.Services.AddScoped<ITournamentService, TournamentService>();
builder.Services.AddScoped<IMatchService, MatchService>();

// Configure Authentication
var jwtKey = builder.Configuration["Jwt:Key"] ?? "your-super-secret-jwt-key-here-min-256-bits";
var jwtIssuer = builder.Configuration["Jwt:Issuer"] ?? "FifaTournament";
var jwtAudience = builder.Configuration["Jwt:Audience"] ?? "FifaTournament";

// Configure Authentication with both OAuth and JWT
var authBuilder = builder.Services.AddAuthentication(options =>
{
    // Use cookies as the default scheme for OAuth flows
    options.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;
    // Use cookies as the default challenge scheme for OAuth flows (not JWT)
    options.DefaultChallengeScheme = CookieAuthenticationDefaults.AuthenticationScheme;
});

// Add cookie authentication support for OAuth flows
authBuilder.AddCookie(CookieAuthenticationDefaults.AuthenticationScheme, options =>
{    options.LoginPath = "/api/auth/signin";
    options.LogoutPath = "/api/auth/signout";
    options.AccessDeniedPath = "/api/auth/access-denied";
    options.Cookie.HttpOnly = true;
    options.Cookie.Name = "FifaTournament.Auth";
    
    // Configure cookie security based on environment
    if (builder.Environment.IsDevelopment())
    {
        options.Cookie.SecurePolicy = CookieSecurePolicy.SameAsRequest;
    }
    else
    {
        options.Cookie.SecurePolicy = CookieSecurePolicy.Always; // Require HTTPS in production
    }
    
    options.Cookie.SameSite = SameSiteMode.Lax;
    options.ExpireTimeSpan = TimeSpan.FromHours(24);
    options.SlidingExpiration = true;
});

// Add Microsoft Identity Web for OAuth (only if configuration exists)
var azureAdSection = builder.Configuration.GetSection("AzureAd");
if (azureAdSection.Exists() && !string.IsNullOrEmpty(azureAdSection["ClientId"]))
{
    Console.WriteLine("‚úÖ Configuring Microsoft OAuth authentication");
    authBuilder.AddMicrosoftIdentityWebApp(azureAdSection, OpenIdConnectDefaults.AuthenticationScheme)
        .EnableTokenAcquisitionToCallDownstreamApi()
        .AddInMemoryTokenCaches();
}
else
{
    Console.WriteLine("‚ö†Ô∏è Microsoft OAuth not configured - Azure AD settings missing");
}

// Add Google authentication (only if configuration exists)
var googleClientId = builder.Configuration["Google:ClientId"];
var googleClientSecret = builder.Configuration["Google:ClientSecret"];

// Debug logging for Google OAuth configuration
Console.WriteLine($"üîç Google OAuth Configuration Check:");
Console.WriteLine($"   ClientId: {(string.IsNullOrEmpty(googleClientId) ? "NOT SET" : "SET")}");
Console.WriteLine($"   ClientSecret: {(string.IsNullOrEmpty(googleClientSecret) ? "NOT SET" : "SET")}");
if (!string.IsNullOrEmpty(googleClientId))
{
    Console.WriteLine($"   ClientId Value: {googleClientId.Substring(0, Math.Min(10, googleClientId.Length))}...");
}

if (!string.IsNullOrEmpty(googleClientId) && !string.IsNullOrEmpty(googleClientSecret))
{
    Console.WriteLine("‚úÖ Configuring Google OAuth authentication");
    authBuilder.AddGoogle("Google", googleOptions =>
    {
        googleOptions.ClientId = googleClientId;
        googleOptions.ClientSecret = googleClientSecret;
        googleOptions.CallbackPath = "/api/auth/google/callback";
        googleOptions.SaveTokens = true;
        
        // Explicitly set the sign-in scheme to use cookies
        googleOptions.SignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;
        
        // Configure scopes
        googleOptions.Scope.Add("email");
        googleOptions.Scope.Add("profile");
        
        // Events for debugging Google OAuth
        googleOptions.Events.OnCreatingTicket = context =>
        {
            Console.WriteLine($"Google OAuth: Creating ticket for user {context.Principal?.Identity?.Name}");
            Console.WriteLine($"Google OAuth: Access token received: {!string.IsNullOrEmpty(context.AccessToken)}");
            return Task.CompletedTask;
        };
          googleOptions.Events.OnRedirectToAuthorizationEndpoint = context =>
        {
            Console.WriteLine($"Google OAuth: Redirecting to authorization endpoint");
            Console.WriteLine($"Google OAuth: State parameter exists: {context.Properties.Items.ContainsKey(".state")}");
            Console.WriteLine($"Google OAuth: Redirect URI: {context.Options.CallbackPath}");
            return Task.CompletedTask;
        };
        
        googleOptions.Events.OnAccessDenied = context =>
        {
            Console.WriteLine($"Google OAuth: Access denied - {context.AccessDeniedPath}");
            return Task.CompletedTask;
        };
        
        googleOptions.Events.OnTicketReceived = context =>
        {
            Console.WriteLine($"Google OAuth: Ticket received for {context.Principal?.Identity?.Name}");
            return Task.CompletedTask;
        };
        
        googleOptions.Events.OnRemoteFailure = context =>
        {
            Console.WriteLine($"Google OAuth failure: {context.Failure?.Message}");
            var error = context.Request.Query["error"].ToString();
            var errorDescription = context.Request.Query["error_description"].ToString();
            Console.WriteLine($"Google OAuth Error Details - Error: {error}, Description: {errorDescription}");
            
            // Log state correlation details
            Console.WriteLine($"Google OAuth: Request state parameter: {context.Request.Query["state"]}");
            Console.WriteLine($"Google OAuth: Properties state: {context.Properties?.Items?.ContainsKey(".state")}");
            
            var errorParam = !string.IsNullOrEmpty(errorDescription) ? errorDescription : 
                            !string.IsNullOrEmpty(error) ? error : context.Failure?.Message ?? "Unknown Google OAuth error";
            
            context.Response.Redirect($"/api/auth/error?error_description={Uri.EscapeDataString(errorParam)}&provider=google");
            context.HandleResponse();
            return Task.CompletedTask;
        };
    });
}
else
{
    Console.WriteLine("‚ö†Ô∏è Google OAuth not configured - Google credentials missing");
}

// Configure OpenIdConnect options (only if Azure AD is configured)
if (azureAdSection.Exists() && !string.IsNullOrEmpty(azureAdSection["ClientId"]))
{
    builder.Services.Configure<OpenIdConnectOptions>(OpenIdConnectDefaults.AuthenticationScheme, options =>
    {
        options.CallbackPath = "/auth/callback";
        options.ResponseType = "code";
        options.SaveTokens = true;
        options.GetClaimsFromUserInfoEndpoint = true;
        options.UsePkce = true;
        
        // Ensure the redirect URI matches what's registered in Azure AD
        options.SignedOutRedirectUri = "http://localhost:5024";
        
        // Configure scopes
        options.Scope.Clear();
        options.Scope.Add("openid");
        options.Scope.Add("profile");
        options.Scope.Add("email");
          // Events for debugging
        options.Events = new OpenIdConnectEvents
        {
            OnRedirectToIdentityProvider = context =>
            {
                Console.WriteLine($"Redirecting to identity provider with state: {context.ProtocolMessage?.State}");
                Console.WriteLine($"Redirect URI: {context.ProtocolMessage?.RedirectUri}");
                return Task.CompletedTask;
            },
            OnAuthorizationCodeReceived = context =>
            {
                Console.WriteLine($"Authorization code received with state: {context.ProtocolMessage?.State}");
                Console.WriteLine($"Request cookies count: {context.Request.Cookies.Count}");
                foreach (var cookie in context.Request.Cookies)
                {
                    Console.WriteLine($"Cookie: {cookie.Key} = {cookie.Value.Substring(0, Math.Min(50, cookie.Value.Length))}...");
                }
            return Task.CompletedTask;
        },
        OnMessageReceived = context =>
        {
            Console.WriteLine($"Message received - State: {context.ProtocolMessage?.State}");
            Console.WriteLine($"Has authorization code: {!string.IsNullOrEmpty(context.ProtocolMessage?.Code)}");
            return Task.CompletedTask;
        },
        OnRemoteFailure = context =>
        {
            Console.WriteLine($"Remote failure: {context.Failure?.Message}");
            Console.WriteLine($"Failure type: {context.Failure?.GetType().Name}");
            
            // Log the failure details
            var error = context.Request.Query["error"].ToString();
            var errorDescription = context.Request.Query["error_description"].ToString();
            Console.WriteLine($"OAuth Error Details - Error: {error}, Description: {errorDescription}");
            
            // Redirect to error endpoint with details
            var errorParam = !string.IsNullOrEmpty(errorDescription) ? errorDescription : 
                            !string.IsNullOrEmpty(error) ? error : context.Failure?.Message ?? "Unknown OAuth error";
            
            context.Response.Redirect($"/api/auth/error?error_description={Uri.EscapeDataString(errorParam)}");
            context.HandleResponse();            return Task.CompletedTask;
        }
    };
    });
}

// Add JWT Bearer authentication for API endpoints
authBuilder.AddJwtBearer("Bearer", options =>
{
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidateLifetime = true,
        ValidateIssuerSigningKey = true,
        ValidIssuer = jwtIssuer,
        ValidAudience = jwtAudience,
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtKey))
    };
});

// Configure authorization to support both Cookie and JWT Bearer authentication
builder.Services.AddAuthorization(options =>
{
    // Default policy accepts both Cookie and Bearer authentication
    options.DefaultPolicy = new Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder(CookieAuthenticationDefaults.AuthenticationScheme, "Bearer")
        .RequireAuthenticatedUser()
        .Build();
        
    // API-specific policy that only accepts Bearer tokens
    options.AddPolicy("ApiOnly", new Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder("Bearer")
        .RequireAuthenticatedUser()
        .Build());
});

// Configure CORS
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowFrontend", policy =>
    {
        var frontendUrl = builder.Configuration["Frontend:BaseUrl"] ?? "http://localhost:5173";        policy.WithOrigins(
            "http://localhost:5173", 
            "https://localhost:5173", 
            "http://localhost:5174", 
            "https://localhost:5174", 
            "http://localhost:3000", 
            "https://localhost:3000",
            "https://victorious-pond-05d5a0403.6.azurestaticapps.net", // Static Web Apps URL
            "https://fifa-tournament-frontend.azurewebsites.net", // App Service frontend URL
            frontendUrl // Add the configured frontend URL (production or development)
        )
              .AllowAnyHeader()
              .AllowAnyMethod()
              .AllowCredentials();
    });
});

// Configure Swagger/OpenAPI
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new() { Title = "FIFA Tournament API", Version = "v1" });
    
    // Configure JWT authentication in Swagger
    c.AddSecurityDefinition("Bearer", new()
    {
        Description = "JWT Authorization header using the Bearer scheme. Enter 'Bearer' [space] and then your token in the text input below.",
        Name = "Authorization",
        In = Microsoft.OpenApi.Models.ParameterLocation.Header,
        Type = Microsoft.OpenApi.Models.SecuritySchemeType.ApiKey,
        Scheme = "Bearer"
    });
    
    c.AddSecurityRequirement(new()
    {
        {
            new()
            {
                Reference = new()
                {
                    Type = Microsoft.OpenApi.Models.ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            Array.Empty<string>()
        }
    });
});

var app = builder.Build();

// Configure the HTTP request pipeline
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(c =>
    {
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "FIFA Tournament API V1");
    });
}

app.UseHttpsRedirection();

// Use CORS
app.UseCors("AllowFrontend");

// Use Session (required for OAuth state management)
app.UseSession();

// Use Authentication & Authorization
app.UseAuthentication();
app.UseAuthorization();

// Map controllers
app.MapControllers();

// Ensure database is created and seeded
try
{
    using var scope = app.Services.CreateScope();
    var context = scope.ServiceProvider.GetRequiredService<FifaTournamentContext>();
    var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
    
    // Always ensure database is created
    context.Database.EnsureCreated();
    
    // Seed test data if in development or if using in-memory database (no connection string)
    if (app.Environment.IsDevelopment() || string.IsNullOrEmpty(connectionString))
    {
        await SeedTestData(context);
    }
    
    Console.WriteLine("‚úÖ Database initialization completed successfully");
}
catch (Exception ex)
{
    Console.WriteLine($"‚ùå Database initialization failed: {ex.Message}");
    Console.WriteLine($"Stack trace: {ex.StackTrace}");
    // Don't crash the app, just log the error
}

static async Task SeedTestData(FifaTournamentContext context)
{
    // Skip if data already exists
    if (context.Users.Any())
        return;

    // Create 4 mock users
    var users = new[]
    {
        new User
        {
            Id = Guid.NewGuid(),
            Email = "alex@example.com",
            DisplayName = "Alex Thunder",
            ExternalProvider = "Google",
            ExternalId = "alex123",
            CreatedAt = DateTime.UtcNow.AddDays(-10)
        },
        new User
        {
            Id = Guid.NewGuid(),
            Email = "sarah@example.com",
            DisplayName = "Sarah Lightning",
            ExternalProvider = "Google",
            ExternalId = "sarah456",
            CreatedAt = DateTime.UtcNow.AddDays(-8)
        },
        new User
        {
            Id = Guid.NewGuid(),
            Email = "mike@example.com",
            DisplayName = "Mike Storm",
            ExternalProvider = "Google",
            ExternalId = "mike789",
            CreatedAt = DateTime.UtcNow.AddDays(-6)
        },
        new User
        {
            Id = Guid.NewGuid(),
            Email = "emma@example.com",
            DisplayName = "Emma Blaze",
            ExternalProvider = "Google",
            ExternalId = "emma101",
            CreatedAt = DateTime.UtcNow.AddDays(-4)
        }
    };

    context.Users.AddRange(users);
    await context.SaveChangesAsync();

    // Create 4 teams (one for each user)
    var teams = new[]
    {
        new Team
        {
            Id = Guid.NewGuid(),
            Name = "Thunder FC",
            LogoUrl = "https://images.unsplash.com/photo-1614632537190-23e4b76f6e4c?w=100&h=100&fit=crop&crop=face",
            OwnerId = users[0].Id,
            CreatedAt = DateTime.UtcNow.AddDays(-9)
        },
        new Team
        {
            Id = Guid.NewGuid(),
            Name = "Lightning United",
            LogoUrl = "https://images.unsplash.com/photo-1579952363873-27d3bfad9c0d?w=100&h=100&fit=crop&crop=face",
            OwnerId = users[1].Id,
            CreatedAt = DateTime.UtcNow.AddDays(-7)
        },
        new Team
        {
            Id = Guid.NewGuid(),
            Name = "Storm Rangers",
            LogoUrl = "https://images.unsplash.com/photo-1574295735720-e71a3d6db22e?w=100&h=100&fit=crop&crop=face",
            OwnerId = users[2].Id,
            CreatedAt = DateTime.UtcNow.AddDays(-5)
        },
        new Team
        {
            Id = Guid.NewGuid(),
            Name = "Blaze Warriors",
            LogoUrl = "https://images.unsplash.com/photo-1551698618-1dfe5d97d256?w=100&h=100&fit=crop&crop=face",
            OwnerId = users[3].Id,
            CreatedAt = DateTime.UtcNow.AddDays(-3)
        }
    };

    context.Teams.AddRange(teams);
    await context.SaveChangesAsync();

    // Create a tournament
    var tournament = new Tournament
    {
        Id = Guid.NewGuid(),
        Name = "FIFA Champions Cup 2025",
        Description = "Annual championship tournament featuring the best teams from around the region. Compete for glory and prizes!",
        MaxTeams = 8,
        EntryFee = 25.00m,
        PrizePool = 500.00m,
        StartDate = DateTime.UtcNow.AddDays(7),
        CreatedById = users[0].Id, // Alex creates the tournament
        Status = TournamentStatus.Open,
        CreatedAt = DateTime.UtcNow.AddDays(-2)
    };

    context.Tournaments.Add(tournament);
    await context.SaveChangesAsync();

    // Add all 4 teams to the tournament
    var tournamentTeams = teams.Select(team => new TournamentTeam
    {
        TournamentId = tournament.Id,
        TeamId = team.Id,
        JoinedAt = DateTime.UtcNow.AddDays(-1)
    });

    var tournamentUsers = users.Select(user => new TournamentUser
    {
        TournamentId = tournament.Id,
        UserId = user.Id,
        JoinedAt = DateTime.UtcNow.AddDays(-1)
    });

    context.TournamentTeams.AddRange(tournamentTeams);
    context.TournamentUsers.AddRange(tournamentUsers);
    await context.SaveChangesAsync();

    Console.WriteLine("‚úÖ Test data seeded successfully!");
    Console.WriteLine($"   - Created 4 users with teams");
    Console.WriteLine($"   - Created tournament: {tournament.Name}");
    Console.WriteLine($"   - All teams joined the tournament");
}

app.Run();
